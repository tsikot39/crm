name: CRM SaaS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  NODE_VERSION: "18"
  DOCKER_BUILDKIT: 1

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace:
          - { name: "frontend", path: "apps/frontend" }
          - { name: "api-gateway", path: "services/api-gateway" }
          - { name: "auth-service", path: "services/auth-service" }
          - { name: "contacts-service", path: "services/contacts-service" }
          - { name: "shared-types", path: "shared/types" }

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install root dependencies
        run: npm ci

      - name: 📦 Install workspace dependencies
        run: |
          cd ${{ matrix.workspace.path }}
          if [ -f package.json ]; then
            npm ci
          fi

      - name: 🔍 Lint code
        run: |
          cd ${{ matrix.workspace.path }}
          if [ -f package.json ] && npm run lint --if-present; then
            echo "✅ Linting passed for ${{ matrix.workspace.name }}"
          fi

      - name: 🎯 Type check
        run: |
          cd ${{ matrix.workspace.path }}
          if [ -f package.json ] && npm run type-check --if-present; then
            echo "✅ Type checking passed for ${{ matrix.workspace.name }}"
          fi

      - name: 🧪 Run tests
        run: |
          cd ${{ matrix.workspace.path }}
          if [ -f package.json ] && npm run test --if-present; then
            echo "✅ Tests passed for ${{ matrix.workspace.name }}"
          fi

      - name: 📊 Upload coverage reports
        if: matrix.workspace.name == 'frontend'
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/frontend/coverage/lcov.info
          flags: frontend

  # Build and Test
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: quality-gates
    strategy:
      matrix:
        service:
          - { name: "frontend", path: "apps/frontend", port: "3000" }
          - { name: "api-gateway", path: "services/api-gateway", port: "3001" }

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd ${{ matrix.service.path }}
          npm ci

      - name: 🏗️ Build application
        run: |
          cd ${{ matrix.service.path }}
          npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service.name }}-build
          path: ${{ matrix.service.path }}/dist
          retention-days: 1

  # Docker Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [quality-gates, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service:
          - { name: "frontend", path: "apps/frontend" }
          - { name: "api-gateway", path: "services/api-gateway" }
          - { name: "auth-service", path: "services/auth-service" }
          - { name: "contacts-service", path: "services/contacts-service" }

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/crm-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    permissions:
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🔍 npm audit
        run: |
          npm audit --audit-level high --production

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: true

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🎯 Deploying to staging environment..."
          echo "📊 Image tags: develop-${{ github.sha }}"
          # Add your staging deployment commands here
          # kubectl apply -f k8s/staging/
          # helm upgrade --install crm-staging ./helm/crm --values ./helm/values-staging.yaml

      - name: 🧪 Run E2E tests
        run: |
          echo "🧪 Running end-to-end tests on staging..."
          # Add your E2E test commands here
          # npm run test:e2e

      - name: 📝 Update deployment status
        run: |
          echo "✅ Staging deployment completed successfully!"
          echo "🔗 Staging URL: https://staging.crm-app.com"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: 🚀 Deploy to production
        run: |
          echo "🎯 Deploying to production environment..."
          echo "📊 Image tags: main-${{ github.sha }}"
          # Add your production deployment commands here
          # kubectl apply -f k8s/production/
          # helm upgrade --install crm-production ./helm/crm --values ./helm/values-production.yaml

      - name: ✅ Verify deployment
        run: |
          echo "🔍 Verifying production deployment..."
          # Add deployment verification commands
          # kubectl rollout status deployment/crm-frontend
          # kubectl rollout status deployment/crm-api-gateway

      - name: 📝 Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 **Production Deployment v${{ github.run_number }}**

            **Changes in this release:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Triggered by: ${{ github.actor }}

            **Deployed Services:**
            - Frontend: `${{ env.REGISTRY }}/${{ github.repository_owner }}/crm-frontend:main-${{ github.sha }}`
            - API Gateway: `${{ env.REGISTRY }}/${{ github.repository_owner }}/crm-api-gateway:main-${{ github.sha }}`
            - Auth Service: `${{ env.REGISTRY }}/${{ github.repository_owner }}/crm-auth-service:main-${{ github.sha }}`
            - Contacts Service: `${{ env.REGISTRY }}/${{ github.repository_owner }}/crm-contacts-service:main-${{ github.sha }}`

            **Environment:**
            - Production URL: https://app.crm-saas.com
            - Status: ✅ Healthy
          draft: false
          prerelease: false

      - name: 📢 Notify teams
        if: success()
        run: |
          echo "📢 Notifying teams about successful production deployment..."
          # Add notification commands (Slack, Teams, etc.)

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 🧹 Clean up artifacts
        run: |
          echo "🧹 Cleaning up old build artifacts..."
          # Add cleanup commands if needed
